1.Byte Stream 바이트 단위로 입출력 하는 스트림으로 InPutStream과 OutputStream이라는 추상 클래스에 공통으로 사용하는 메소드를 선언해 두었습니다.
2.Character Stream 문자단위로 입출력하는 스트림으로 Reader와 Writer라는 추상 클래스에 공통으로 사용하는 메소드를 선언해 두었습니다.

ByteStream 바이트 단위로 입출력하는 스트림
1.InputStream 바이트 단위로 데이터를 읽어오기 위한 스트림,  

메소드 - void close() // 스트림을 닫기 위한 메소드
          - Int available() // 읽을 수 있는 바이트 크기를 리턴하는 메소드
          - int read() // 1바이트 데이터를 읽어서 정수로 리턴하고 메소드로 리턴값이 음수이면 읽을 데이터가 없는것
          - int read(byte [] b) // b배열의 크기만큼을 읽어서 b에 저장하고 읽은 바이트 수를 리턴하는 메소드
                                     //이 메소드의 리턴값이 0보다 작거나 같으면 읽을 데이터가 없는 것입니다.
          - int read(byte [] b, int offset, int length) // b배열에 offset부터 length만큼 읽어서 저장하는 메소드로
                                                                   // 읽은 개수를 리턴합니다.
                                                                 // 이 메소드의 리턴값이 0보다 작거나 같으면 읽을 데이터가
                                                               // 없는 것입니다.
2.OutputStreame 데이터를 바이트 단위로 출력하기 위한 메소드를 소유한 추상클래스

메소드 - void close() // 스트림 닫기
          - void write(int b) // b를 출력
          - void write(byte [] b) // b 배열의 모든 내용을 기록
          - void write(byte [] b, int offset, int length) // b 배열의 offset 부터 length 만큼을 기록
          - void flush() // 버퍼에 저장된 내용을 기록 

3.java.io.FileOutputStream

생성자 - FileOutputStream(String name)// 파일의 경로를 문자열로 대입해서 생성하는데 기록하면 무조건 처음부터 기록합니다. 파일이 없으면 생성합니다.
FileOutputStream(String name, boolean append)// append가 true이면 파일이 존재하는 경우에 맨 마지막에 추가해서 기록
FileOutputStream(File file)// 파일의 경로를 문자열로 주는 대신에 File인스턴스를 생성해서 대입합니다.
FileOutputStream(File file, boolean append)// 

4.파일에서 바이트 단위로 읽어오는 클래스

FileInputStream(String name)//파일 경로를 문자열로 대입해서 생성
FileInputStream(File file)// 파일 경로를 FIle인스턴스로 만들어서 대입 // 읽을 때는 반복문을 이용해서 읽어야 하고 읽은 게 없으면 반복문을 종료하독록 만들어 주어야 합니다.

5.입출력 할 때 버퍼를 이용하는 이유 // 파일 입출력이나 네트워크 입출력은 운영체젲의 자원을 이용하기 때문에 운영체제의 native mothod(운영체제가 사용하는 메소드로
                                                  / 일반적으로 C 언어로 작성되어 있습니다)를 호출 해야 합니다
                                               // 입출력을 빈번히 수행하게 되면 운영체제와 통신을 많이 하므로 비효율적일 수 있기 때문에 입출력할 내용을 버퍼에 모아서 처리하도록 하면
                                               / native method 호출의 횟수를 줄일 수 있기 때문에 버퍼를 이용해야 합니다.

6. BufferedInputStream // 바이트 단위로 버퍼를 이용해서 읽어내는 스트림
                                 // 이 스트림은 다른 스트림을 매개변수로 받아서 생성



7. PrintStream // 바이트 단위로 버퍼를 이용해서 기록하는 스트림으로는 BufferedOutputStream이 잇는데 출력하는 메소드로 print를 사용 할 수 있는
                     / PrintStream을 많이 사용합니다.
                  // 콘솔에 출력하는 System.out이나 System.err이 PrintStream 입니다.
                // File이나 OutputStream 인스턴스를 이용해서 객체를 생성합니다.
              // write 메소드 외에도 print 메소드를 사용할 수 있습니다.
            // print 메소드는 출력하라는 명령이 올 떄 까지 출력하지 않고 모아서 출력하고 println은 한 줄의 명령이 올 때 마다 바로바로 출력합니다.
            / println은 나누어서 출력하면 안됩니다. println은 한 번에 출력해야 하는 내용은 반드시 한번에 출력해야 합니다// 채팅 보내기 눌렀을때 이용
         // 주로 사용하는 클래스는 FileReader, FileWriter, BufferedReader, PrintWriter 클래스 입니다.

1.Reader 클래스 // 문자 단위로 읽기 위한 메소드를 소유한 추상 클래스

Char read()
int read(char[] ch)
int read(char[], int offset, int length)

2.Writer// 문자 단위로 기록하기 위한 메소드를 소유한 추상 클래스
-void writer(String str)

3.FileWriter// 문자 단위로 파일에 기록할 수 있는 스트림 클래스
               // 생성자 - FileWriter(String 파일경로)
                             - FileWriter(String 파일경로, boolean append)// append에 true를 대입하면 파일이 있는 경우에는 이어쓰기를 합니다.
                             - FileWriter(File file)
                             - FileWriter(File file, boolean append) // 
4.FIleReader //파일의 내용을 문자 단위로 읽을 수 있는 스트림이다. // 읽는 것에는 append가 없다.
                 // 생성자 -FileReader(String 파일경로)
                               -FileReader(File file)    

4.BufferedReader // 버퍼를 이용해서 문자 단위로 읽어오는 클래스
                        // 줄 단위로 읽어서 String으로 리턴하는 readLine 메소드가 있습니다.
                      // 생성자 - BufferdReader(Reader reader)
                                    - FileReader와 같은 클래스의 인스턴스르 대입해도 되고 new InputStreamReader(InputStream inputStream)을 이용해서
                                      인스턴스를 생성할 수 있습니다. 네트워크(소켓, 웹)에서 문자열을 읽어 올때는 두번 째 방법을  사용합니다.
                // Scanner를 이용해서 정수와 문자열을 연속해서 입력받는 경우 정수를 받을 때 nextInt를 사용하면 문제가 발생할 소지가 있습니다.
                /  되도록이면 문자열 단위로 입력받은 후 정수로 변환하는 방식을 사용하는 것이 좋습니다.                                 
                        

             
 

문자열을 숫자 데이터로 변환 - Integer.parseInt(문자열) -> Integer : int
                                        - Double.parseDouble(문자열) -> Double : double

숫자(산술 연산이 가능) 데이터를 문자열(입출력이 가능)로 변환 -  숫자 + ""
                                                                                       - String.format("서식", 숫자 데이터) -> String

                                                                                        ex)  10 -> "10"  - 10 + ""
                                                                                                                - String.format("%d", 10)      
이름, 나이, 키를 입력받아서 하나의 변수에 저장하자.
이름(String)
나이(int)
키(double)

묶을 수 있는것  - 배열,List // 구성요소의 자료형이 동일해야한다.
                      - Map, VO클래스 // 구성요소의 자료형에 관계가 없다.

class ? {
    저장할데이터 -> private 변수로 선언   ->   ? 변수 = new ? ();
    getters & setters 구현                      ->  변수.set변수이름(데이터); // 저장
    to String  재정의                              ->  변수.get변수이름();         //가져오기
}                        

Map<String, Object> 이름 = new Hash Map<>();
이름.put("변수명", 데이터); //저장
이름.get("변수명");            //가져올 때 Object로 리턴됩니다. 출력은 그냥하지만 사용할 때는 형변환해야 한다.

1.String : 변할 수 없는 문자열을 저장
 (mutable)
2.StringBuilder : 변할 수 있는 문자열을 저장
 (immutable)    

      StringBuilder sb = new StringBuilder("Hello");
      sb.append("world");             // append(문자열)
      String s = sb.toString();        // toString() 
      sb = null;                        

ex1) 이름, 나이, 키를 저장 받는 클래스를만들자

1)이름과 나이와 키를 저장 할 수 있는 VO클래스 생성

ex2) 내용이 많은 양의 내용을 읽거나 웹에서 다운로드 하는 경우에는 분할해서 데이터를 가져옵니다.
문자열을 분할해서 읽은 후 하나로 만들 때는 문자열을 계속해서 이어 붙어야 합니다.
String은 원래의 문자열에 다른 문자열을 추가하면 복사를 수행한 후 작업을 하기 때문에 이어 붙이기를 하면 메모리 낭비가 발생할 가능성이 커집니다.
이럴 때는 StringBuilder를 이용해서 문자열을 이어붙이고 다 읽은 후 String으로 변환하는 작업을 활용해야 합니다.

csv 파일을 읽어서 통계 작업
csv 공백이나 탭 또는 Enter를 이용해서 데이터를 구분한 텍스트 파일로 변하지 않는 데이터를 제공하고자 할 때 많이 사용합니다.

하나의 텍스트를 분할
1)기호를 기준으로 분할 할 때는 String [] split "기호" - 기호로 분할해서 String 배열을 만들어 줍니다.
2)위치를 분할: String substring(자를 위치) - 위치부터 끝까지 문자열을 리턴
3)앞에서 부터 자를 때는 charAt(int idx)를 이용




















